#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mean-app:server');
const http = require('http');
const config = require('../config/config');

const socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = socketIO(server);

var loggedInUsers = [];
var newUser;

//------------------- socket io--------------------------//
io.on('connection', function (socket) {
  console.log('User connected');
  socket.on('liveClients', function (data) {
    loggedInUsers.push(data);
    newUser = data;
    const uniqueUsers = Array.from(new Set(loggedInUsers));
    io.emit('clients', { clients: uniqueUsers });
  });

  socket.on('leaveChat', function (data) {
    loggedInUsers.splice(loggedInUsers.indexOf(data), 1);
    io.emit('clients', { clients: loggedInUsers });
  });

  socket.on('disconnect', function () {
    console.log('User disconnected');
  });

  socket.on('save-message', function (data) {
    io.emit('new-message', { message: data });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  // tslint:disable-next-line:no-shadowed-variable
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
